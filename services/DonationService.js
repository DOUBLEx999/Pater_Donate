const Donation = require('../models/Donation');

class DonationService {
  constructor(io) {
    this.io = io;
    this.baseURL = 'https://ownby4levy.vercel.app/api/redeem';
    this.timeout = 30000; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ timeout
  }

  /**
   * ‡πÅ‡∏¢‡∏Å voucher hash ‡∏à‡∏≤‡∏Å URL
   */
  extractVoucherHash(link) {
    try {
      const patterns = [
        /v=([a-zA-Z0-9]+)/,
        /\/([a-zA-Z0-9]+)$/,
        /gift\.truemoney\.com\/campaign\/\?v=([a-zA-Z0-9]+)/
      ];
      
      for (const pattern of patterns) {
        const match = link.match(pattern);
        if (match && match[1]) {
          return match[1];
        }
      }
      
      throw new Error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } catch (error) {
      throw new Error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  async isDuplicateVoucher(voucherHash) {
    const existing = await Donation.findOne({ voucherHash });
    return !!existing;
  }

  /**
   * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å TrueMoney API
   */
  async callTrueMoneyAPI(voucherHash) {
    if (!process.env.TRUEMONEY_MOBILE) {
      throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TRUEMONEY_MOBILE ‡πÉ‡∏ô environment variables');
    }

    console.log('üîÑ Calling TrueMoney API with hash:', voucherHash);

    const payload = {
      voucherCode: voucherHash, // ‡πÉ‡∏ä‡πâ hash ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà full URL
      mobileNumber: process.env.TRUEMONEY_MOBILE
    };

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      const response = await fetch(this.baseURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Accept': 'application/json'
        },
        body: JSON.stringify(payload),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      console.log('üì° TrueMoney API Response Status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå TrueMoney API Error Response:', errorText);
        throw new Error(`API Error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('üìù TrueMoney API Response Data:', JSON.stringify(data, null, 2));
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      const isSuccess = data.success === true || 
                       data.status === 'success' || 
                       data.status?.code === 'SUCCESS' ||
                       data.status?.message === 'success' ||
                       (data.data && data.data.voucher);

      if (!isSuccess) {
        const errorMsg = data.message || data.error || data.status?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏•‡∏Å‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤‡πÑ‡∏î‡πâ';
        console.error('‚ùå TrueMoney API Failed:', errorMsg);
        throw new Error(errorMsg);
      }

      // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î
      let amount = 0;
      
      if (data.data?.voucher?.amount_baht) {
        amount = parseFloat(data.data.voucher.amount_baht);
      } else if (data.data?.voucher?.redeemed_amount_baht) {
        amount = parseFloat(data.data.voucher.redeemed_amount_baht);
      } else if (data.data?.my_ticket?.amount_baht) {
        amount = parseFloat(data.data.my_ticket.amount_baht);
      } else if (data.amount_bath) {
        amount = parseFloat(data.amount_bath);
      } else if (data.amount) {
        amount = parseFloat(data.amount);
      } else if (data.value) {
        amount = parseFloat(data.value);
      }

      console.log('üí∞ Extracted amount:', amount);

      if (!amount || amount <= 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      return { amount, data };

    } catch (error) {
      if (error.name === 'AbortError') {
        throw new Error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
      throw error;
    }
  }

  /**
   * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ
   */
  async processDonation({ voucherLink, donorName, message, ipAddress }) {
    try {
      console.log('üîÑ Processing donation:', { donorName, voucherLink });

      // ‡πÅ‡∏¢‡∏Å voucher hash
      const voucherHash = this.extractVoucherHash(voucherLink);
      console.log('üîë Extracted voucher hash:', voucherHash);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥
      if (await this.isDuplicateVoucher(voucherHash)) {
        throw new Error('‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      const { amount, data: apiData } = await this.callTrueMoneyAPI(voucherHash);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const donation = new Donation({
        donorName,
        amount,
        message,
        voucherHash,
        voucherLink,
        ipAddress,
        status: 'completed',
        apiResponse: apiData // ‡πÄ‡∏Å‡πá‡∏ö response ‡∏à‡∏≤‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢
      });

      await donation.save();

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö real-time
      const donationData = {
        id: donation._id,
        donorName: donation.donorName,
        amount: donation.amount,
        message: donation.message,
        timestamp: donation.timestamp
      };

      this.io.emit('new-donation', donationData);

      console.log('‚úÖ Donation processed successfully:', donationData);

      return {
        success: true,
        message: `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ${donorName} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ ${amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó!`,
        data: donationData
      };

    } catch (error) {
      console.error('‚ùå Donation processing error:', error.message);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error donation
      try {
        const errorDonation = new Donation({
          donorName,
          amount: 0,
          message,
          voucherHash: this.extractVoucherHash(voucherLink || '').catch(() => ''),
          voucherLink,
          ipAddress,
          status: 'failed',
          errorMessage: error.message
        });
        await errorDonation.save();
      } catch (saveError) {
        console.error('‚ùå Failed to save error donation:', saveError.message);
      }
      
      return {
        success: false,
        message: error.message
      };
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
   */
  async getRecentDonations(limit = 10) {
    try {
      const donations = await Donation.find({ status: 'completed' })
        .sort({ timestamp: -1 })
        .limit(limit)
        .select('donorName amount message timestamp -_id')
        .lean();

      return donations;
    } catch (error) {
      console.error('‚ùå Error getting recent donations:', error.message);
      return [];
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ
   */
  async getDonationStats() {
    try {
      const stats = await Donation.aggregate([
        { $match: { status: 'completed' } },
        {
          $group: {
            _id: null,
            totalAmount: { $sum: '$amount' },
            totalDonations: { $sum: 1 },
            averageAmount: { $avg: '$amount' },
            topDonation: { $max: '$amount' },
            lastDonation: { $max: '$timestamp' }
          }
        }
      ]);

      return stats[0] || {
        totalAmount: 0,
        totalDonations: 0,
        averageAmount: 0,
        topDonation: 0,
        lastDonation: null
      };
    } catch (error) {
      console.error('‚ùå Error getting stats:', error.message);
      return {
        totalAmount: 0,
        totalDonations: 0,
        averageAmount: 0,
        topDonation: 0,
        lastDonation: null
      };
    }
  }
}

module.exports = DonationService;